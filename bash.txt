$? SHELL TYPES

## startup files
/etc/bash.bashrc ## all-user bashrc
/etc/profile ## all-user profile
/home/user/.bashrc ## user-specific bashrc
/home/user/.profile ## user-specific profile

login shell ## shell session started when a user logs into a system - reads configuration files /etc/bash.bashrc and /etc/profile then ~/.bashrc and ~/.profile
non-login shell ## shell session started with a user already logged in, like opening a new terminal window in a graphical environment, running a bash sub process or running a script - bash config files are read but not profile files
interactive shell ## shell happening through keyboard and screen
non-interactive shell ## no human interaction - output is log

#? BASH

## open a bash process
bash -x ## debugger mode
bash -o vi ## vi-style line editing interface
w ## all set options are available to use with the bash command

bash -l ## invoke login shell (loads every startup files)
bash -i ## invoke interactive shell (loads only user bashrc)
bash --noprofile ## no-profile shell (loads only user bashrc)
bash --norc ## does not load any startup file
bash --rcfile <file> ## load only a specified startup file (/etc/bash.bashrc is also loaded)

su - <user>, su -l <user> ## login interactive shell as user (all startup files are loaded)
su <user> ## interactive non-login shell as user (only bashrc is loaded)
sudo -u <user> -s ## interactive non login-login shell as user
sudo -i ## interavtive login shell as root
sudo -u <user> -i <command> ## open interactive login shell as user, do command and return to the original user

echo $0 ## print shell type
## -bash is the output for an interactive login shell - default
## bash is the output for an interactive non-login shell - bash child process
## <name_of_script> is the output for a script
ps | grep bash ## get active shells list

#? ALIAS

alias ll='ls -Ahl --color=auto' ## ll does now the long ls command
'ls' ## overwrite alias
\ls ## overwrite alias

#? TYPE

type command ## describe how its arguments would be interpreted if used as command names, possible re    sults are listed below
type -a command ## show all locations for a command: ls goes /bin/ls and /usr/bin/ls

shell builtin ## built-in-shell command, executed directly by the shell itself without creating a sub process, rather than by an external program, part of the shell's internal binary
## Examples: cd, echo, exit, pwd, alias, set
alias ## if bash alias
/bin/ls ## external executable searched through the PATH environment variable
## Examples: ls, cat, grep, find
function ## not commands but functions written in bash, defined by the user or the distribution

man ## external executable manuals
help ## shell builtins help

#? VARIABLES

variable=value ## create a local variable, available only in the same bash process
export variable=value ## create a variable available in child processes
PATH=$PATH:~ script ## if a script is in the home direcory, it is run and the PATH is changed only the time of the commmand
var=value bash -c "echo $var" ## var exists only the time of the command execution (echo is trough bash -c cause bash expansion happens before variable assignement

echo $ls ## echo variable ls
echo ${ls} ## echo variable ls
echo $(ls) ## echo output of ls command

blop=crac
echo $blopbip ## prints nothing cause searches for variable blopcrac
echo ${blop}bip ## prints cracbip

${#blop} ## variable length

env ## display all environment variables of the current shell
set ## display all environment variables, shell variables, and shell functions 
## shell variables and functions are defined in all confiration files, user-wide and system-wide
set -option ## enable a shell option
set +option ## disable a shell option
set -x ## enable debugging mode, displaying all commands
set +x ## disable debugging mode
set -e ## exit on error
set -u ## treat unset variable as an error and exit
set -- blop crac boum && echo $1 $2 $3
## set -- allows to assign values to positionnal parameters, so the echo command will print blop crac boom
unset var ## removes shell variable or function from current bash process

#? DECLARE

declare var=value ## declare and define a variable
declare -r VAR=value ## declare a read-only variable, i.e. a constant

declare -a array=(1 2 3) ## declare indexed array
declare -A array=([key1]=1 [key2]=value2) ## declare associative array

declare -i var=4+2 ## declare integer, allowing arithmetic operations by itself
declare -i var=$a+$b ## with variables
var+=1 ## works if integer declared ; if not, it adds 1 at the end of the variable as in a string

declare -x VAR=value ## export variable for child processes like the export command
declare -f function ## display definition of the function
declare -g var=value ## declare global variable - default is local variable
declare -n ref=original_var ## declare name reference, i.e. alias to another variable

declare -p ## print all declared variables

#? EXPR

expr expression ## evaluate expressions - allow arithmetic, comparison, logical and string operations
1 + 1 ## is interpreted as text by bash
num=1; num=$num+1 ## $num is now "1+1"

expr 4 + 2 ## performing additions
expr 4 - 2 ## substractions
expr 4 / 2 ## divisions - integer only: 9 / 4 returns 2
expr 4 \* 2 ## multiplications - needs to escape asterisk
expr 4 % 2 ## modulus
expr -4 + 2 ## handle relative numbers

expr $a + $b ## with variables
expr $var + 1 ## increment

expr 4 == 2
expr 4 != 2
expr 4 \> 2 ## needs to escape chevrons
expr 4 \< 2
expr 4 \<= 2
epxr 4 \>= 2

expr 4 == 2 \& 1 == 3 ## logical AND
expr 4 == 2 \| 1 == 3 ## logical OR

expr length string ## return string length
expr index string n ## return position of n - 0 is not found and returns only first appearance
expr substr string 1 2 ## return from position 1 2 characters
expr match string str ## return number of characters found if string is found, return 0 if string is not found

#? LET

## let is not used to print result, it can only perform calculations and store it to data
let 4+2 ## does the calculation but no output
let a=4+2 ## a is now 6, while a=4+2 alone makes a be a string "4+2" - handles variables without $
echo $a ## the result can only be printed this way, through a variable

let result=4+2
let result=4-2
let result=4*2
let result=4/2
let result=4%2
let result=4**2 ## exponentiation
let result=4-20 ## relative numbers work
let result=4.5-2 ## decimal numbers dont work

let c=a+b ## works with variables
let a=5 b=2 c=a-b ## allows multiples operations
let c++ ## increment variable

#? ARITHMERIC OPERATOR

## expansions output nothing but return an int or a bool - uses $(()) for value substitution or capture the result
((expression)) ## arithmetic expansion

echo $((4 + 2)) ## print result 
var=$((4+2)) ## redirect result
((var = 4+2)) ## can be done directly in the parentheses
## var exists outside of parentheses
echo $((var = 1+3)) ## var is changed and printed at the same time

((4 + 2)) ## return result of additions - needs use of echo to be printed
((4+3)) ## works without spaces
((4 - 2)) ## substractions
((4 / 2)) ## divisions - integer only: 9 / 4 returns 2
((4 * 2)) ## multiplications
((4 % 2)) ## modulus
((4 ** 2)) ## exponentiation
((-4 + 2)) ## handle relative numbers
((5 + (3 *2))) ## complex operations
((10-+1)) ## equals 9

((a + b)) ## with variables - $ is optional
((a++)) ## increment - set new value to variable at the same time
((a--)) ## decrement
((a=5)) ## $a is now 5

((4 == 2)) ## returns false
((4 != 2)) ## returns true
((4 < 2)) ## returns false
((4 <= 2)) ## returns false
((4 > 2)) ## returns true
((4 >= 2)) ## returns true

#? BC

## Basic Calculator - allow to perform calculations beyond bash capabilities
bc ## enter bc interactive mode
scale=2 ## define number after zero precision - 0 is the default
10 / 3 ## returns 3 by default
10 / 3 ## returns 3.3 with scale=1

echo 4 / 2 | bc ## pass expression to bc from the command line
echo "scale=2; 4 / 3" | bc ## enable floating point arithmetic

4^2 ## allow exponents
sqrt(9) ## allow square root functions

## has also a math library, and capabilities to use conditions, loops and functions

#? COMMAND SUBSTITUTION

## capture output of a command to use it as a argument in another command or assign it to a variable
var=`date` ## using backticks, old fashion
var=$(date) ## using $(), new fashion
echo "The system uptime is $(uptime -p)" ## in a command

#? SPECIAL PARAMETERS

parameter $? ## The exit status of the last command
## 0 is for command success or true, 1 and more is for errors 
parameter $1 ## First positionnal parameter when arguments are given to a script
parameter $2 ## Second positionnal parameter, and so on until $9, so $10 and more wont work
parameter $0 ## shell type - name of the script if in a script
parameter $_ ## Last argument of the previous command
parameter $# ## The number of positional parameters
parameter $* ## equals $1 $2 $3
"$*" ## equals "$1 $2 $3" - one parameter
parameter $@ ## equals $1 $2 $3
"$@" ## equals "$1" "$2" "$3" - three parameters
## The difference can matter when providing as arguments strings with space that confuse the count of arguments: echo 3 "Sun Tzu" Bob
parameter $$ ## The process ID of the current shell
echo $PPID ## The process parent ID of the current shell
parameter $! ## The process ID of the last background command
parameter $- ## Current options set for the shell

#? QUOTING AND ESCAPING

echo '$var' ## preserve literal value of all characters
echo "$var" ## preserve literal value of all characters except for $, \ and `

#? IF

## basic syntax
if condition; then
	command
elif other_conditon; then
	command
else
	command
fi

## Conditions can be commands, comparisons or tests
## Bash evaluates the exit status: 0 is true, non-zero is false

if ls /roote ## ls /roote returns exit 1 so the condition is false
if ls 1> /dev/null 2>&1; then echo true; else echo false; fi ## output of ls is sent away
if [ -z "$(ls -A /path/to/dir)" ] ## use command substitution to check if directory is empty

test condition ## condition with test command
if test 4 -eq 4; then echo true; else echo false; fi ## example
[ condition ] ## shortcut for test command
if [ 4 -eq 4 ]; then echo true; else echo false; fi ## example

-eq ## Number is equal
-ne ## Number is not equal
-lt ## Number is less than
-le ## Number is less than or equal
-gt ## Number is greater than
-ge ## Number is greater than or equal

-e ## File exists
-f ## File is a regular file
-d ## File is a directory
-r ## File is readable
-w ## File is writable
-x ## File is executable

= ## Strings are equal
== ## Strings are equal
!= ## Strings are not equal
-z ## String is empty
-n ## String is not empty
-v ## String is not set

[ "$var" = "string" ] ## quotes are needed cause if $var is empty, it compares an empty string instead of producing a syntax error

[ 1 -eq 0 ] && [ 1 -gt 2 ] ## logical operator AND
[ 1 -eq 0 ] || [ 1 -gt 2 ] ## logical operator OR
[ ! 1 -eq 0 ] ## logical operator NOT
#? -o -a logical operators
$? isolation with parentheses exists with you escape them \(

[ $var ] ## bash checks if value is empty or not, not if its equal to zero or not

((1 > 0)) ## works also with arithmetic expressions

## double brackets provide more advanced and safer syntax
[[ 3 < 9 ]] ## allows arithetic expressions syntax
[[ "some file" == some* ]] ## works with wilcard characters
[[ 2 == 0 && 3 < 9 ]] ## works with logical operators
[[ (4 == 4 && 4 == 5) || 6 < 2 ]] ## works with parentheses for logical operators
[[ "string" =~ ^[a-z] ]] ## equals with tilde ~ allows usage of regular expressions: in this regex test, the left value is treated as the text where to find the pattern, and the right value is that patter
## no syntax error with empty strings without quotes
#? support des extglob *(), *() (voir shopt -s extglob)
#? no need of escaping parentheses with \( and \)

#? CONDITIONS WITH LOGICAL OPERATORS

## the presence of logical operator creates a conditional system based on first command's exit status
ls /homd || echo fail ## does echo if ls fails
ls /home && echo success ## does echo if ls succeeds

#? CASE

case $var in
    1)
			echo "$var = 1"
      ;;
		2) echo "$var =2";;
    "red")
      echo "$var = red"
      ;;
		*.txt)
			echo "$var is a text file"
			;;
		?.sh)
			echo "$var is a shell script with a single-character name"
			;;
		[A-Z]*)
			echo "$var starts with an uppercase letter"
			;;
		"Monday"|"Tuesday")
			echo "$var is either Monday or Tuesday"
			;;
    *) ## fallback option, default is no other option is met
      echo "$var is something else"
      ;;
esac

case $i in 2) echo 2 ;; 5) echo 5 ;; esac ## one-line case

#? WHILE

while command; do command; done ## executes command as long as return value is 0
i=0
while [[ $i < 5 ]]; do
	echo $i
	((i++))
done

#? UNTIL

until command; do command; done ## executes command until condition is met

#? FOR

## regular syntax
for i in 1 2 3; do
	echo $i
done

for in in {1..5}
for i in $(seq 1 5)
for i in file.txt ## $i value is "file.txt", cause globbing didnt work
for i in *.sh ## file globbing works
for i in file[123] ## globbing
for ((i = 1; i <= 5; i++)); do echo ok; done ## classic c loop

$? FUNCTIONS

sayHello() {
	echo "Hello"
}
sayHello

function sayHello() ## classic syntax
function sayHello ## alternative syntax

#? ARRAYS

## index array
array=(1 2 3) ## declare an array
array[0]=1 ## define element 0 of array
echo $array ## access element 0 of array
echo ${array[0]} ## access element 0 of array
echo ${array[@]} ## access all elements of array
echo ${array[*]} ## same
echo ${#array[@]} ## print array length
array+=(4) ## add element at the end of the array
unset array[1] ## make element 1 empty, but does not remove the index neither change order of elements
for i in ${array[@]}; do echo $i; done ## iterate over array values
for i in ${!array[@]}; do echo $i; done ## iterate over array keys
for i in ${!array[@]}; do echo $i = ${array[$i]}; done ## iterate over array keys and values

${array[@]} ## expands to values of array
${!array[@]} ## expands to indices of array

## associative array
declare -A assoc_array=([key1]=value1 [key2]=value2) ## declare and define it
assoc_array[key3]=value3 ## add key and value
echo ${assoc_array[key2]} ## access element key2 of array
echo ${assoc_array[@]} ## access all elements of array
echo ${#assoc_array[@]} ## print array length
for i in ${assoc_array[@]}; do echo $i; done ## iterate over array values
for i in ${!assoc_array[@]}; do echo $i; done ## iterate over array keys
for i in ${!assoc_array[@]}; do echo "$i = ${assoc_array[$i]}"; done ## print keys and values
if [ -v ${assoc_array[key1]} ]; then echo true; else echo false; fi ## check if key exixts
unset assoc_array[key3] ## remove element

array="1 2 3" ## false array, it is a string - all values are created in ${array[0]}
for i in $array; do echo $i; done ## go through false array

#? READ

read ## take value from standard input and put it by default in $REPLY
read < file ## take a file as input
## by default seperates with spaces and ends with new line (cf IFS)
echo "Hello what's up" > txt
read var1 var2 var3 < txt ## var1 is Hello, var2 is what's, var3 is up
## parses in multiple variable as possible

IFS=:
while read login hash uid gid gecos home shell; do
	echo "login = $login, shell = $home"
done < /etc/passwd

read name ## prompt the user for input and store that input in a specified variable
read -p "Give value" name ## make a prompt without the need of an echo
read -n 1 foo ## read only the first character and go on
read -s name ## silent the input to not display it
read -r name ## disables backslash escaping, useful for path reading
read firstname lastname ## read two values
read txt < file ## store the first line of the file in the variable
read -t 3 value ## wait only 3 seconds for the input

read <<< $(ls) ## takes first result of ls

#? SOURCE

source filepath ## execute bashscript in same process - include file in another script
. filepath ## shortcut
## sourcing files containing variable defitions allows to use them:
. /etc/os-release ## source os info file
echo $PRETTY_NAME ## echo variable

#? SUBSHELLS

## parentheses create a separate instance of the shell that inherits the environment of the parent shell (variables, functions etc.), but any creation done or any change made to the environment within the subshell do not affect the parent shell
(cd /var/www/ && ls -lA) ## the subshell performs cd and ls, but when back to parent shell, nothing changed, pwd is as before
(hostname; date) >> file ## combine output: execute two commands in a subshell and send result to file
ls | grep pattern ## each command in a pipeline is executed in its own subshell
var=$(ls) ## command substitutions uses subshell
vim & ## command in the background uses a subshell

#? GROUPING COMMANDS

## braces dont create a separate instance, but group the commands together to redirect the output of multiple commands to a single stream
{ echo file1; echo file2; echo file3; } > file ## group commands and send everything to the file

#? FILE GLOBBING

## file globbing allows to represent multiple file names
## wildcards are used that represent one or more characters
* ## represents zero, one or more occurrences of any character
## ? represents one occurence of any character
[] ## represents one occurrence of th characters enclosed in the square brackets
echo * ## prints every file in working directory
echo *.txt ## prints every file ending in .txt
echo l?st ## prints every file in working directory matching pattern
echo l[abc]st.txt ## matches only last.txt, lbst.txt and lcst.txt
echo [a-z][A-Z].txt ## matches only file names of one lower case letter and one capital then .txt
echo l[0-9] ## matches only a file name composed of l and a number
echo ? ## ouput ? cause didnt find file matching pattern
ls ? ## ouput no such file in directory

#? BRACE EXPANSION

echo {a,b,c,d} ## list expansion: echo a b c d
echo {a..d} ## sequence expansion: echo a b c d
echo {a..q..4} ## step increment: echo aeimq

echo {a,b,c}{1,2,3} ## nested expansion: echo a1 a2 a3 b1 b2 b3 c1 c2 c3
echo {a..c}{1..3} ## works the same with sequence expansion

echo file{1..3} ## prefix and suffix expansion: echo file1.txt, file2.txt and file3.txt
echo {ca,co}.txt ## matches ca.txt and co.txt
ls {p*,*.txt} ## matches files beginning with p or ending with .txt

#? VARIABLE EXPANSION

## the shell replaces variable reference by its value during execution of a command
echo $var ## basic variable expansion
echo ${var}text ## with curly braces - better delimitation of the variable name

echo ${var:=default} ## default values: if $var is null or not set, the default value is used
## variants do exist with -, + or ? instead of =
echo ${var:2} ## substring extraction: extract the string from character 2
echo ${var:1:2} ## substring extraction: extract two characters from character 1

echo ${#var} ## string length expansion
echo ${var/pattern/replacement} ## replace the first match of pattern by replacement in var
echo ${var//pattern/replacement} ## replace all matches of pattern by replacement in var

path="/path/to/file.txt"
echo ${var#pattern} ## remove the shortest match of pattern from the beginning of var
echo ${path#*/} ## outputs path/to/file.txt
echo ${var##pattern} ## remove the longest match of pattern from the beginning of var
echo ${path##*/} ## outputs file.txt
echo ${var%pattern} ## remove the shortest match of pattern from the end of var
echo ${path%/*} ## ouputs /path/to
echo ${var%%pattern} ## remove the longest match of pattern from the end of var
echo ${path%%/*} ## outputs empty string

$? PATHS

dirname <path> ## strip last component from file name
basename <path> ## strip directory and suffix from filenames
realpath <relative_path> ## get absolute path from relative path
pwd ## get current directory's absolute path

$? SELECT

## classic syntax to make a menu
PS3="Select color:" ## PS3 is the prompt for select command
select color in red green blue; do
	echo $color ## value is red green or blue
	echo $REPLY ## value is 1 2 or 3 ## print again the menue if $REPLY is empty
	case $color in 
		red) echo "red" ;;
		green) echo "green" ;;
	 	blue) echo "blue" ;;
	esac
done
select var in list; do echo $var; done ## one line
select color in red green blue; do case $color in red) echo "red" ;; green) echo "green" ;; blue) echo "blue" ;; esac; done

## break, continue

#? ENVIRONMENT VARIABLES

$HOME ## home path
$PWD ## working directory
$OLDPWD ## previous directory
$PATH ## lits of dirs where bash searches for commands
$RANDOM ## random number between 0 and 32767
$REPLY ## default variable for read and select commands
$SECONDS ## seconds since current bash process creation
## control the command prompt
PS1 ## primary prompt over the terminal
## default value is \u@\h:\w\$
PS2 ## secondary prompt - happen when command spans multiple lines, typically when Enter is pressed while command is not complete, for instance after an unclosed quote, brace or backslash
## default value is >
PS3 ## prompt for select command
## default is #?
PS4 ## Debug prompt (when set -x was performed)
## Default value is +

#? RETURN

## End a function providing a specified exit status
return <number>

#? SHIFT

shift ## shift positional parameters to the left : $1 disappears, $2 becomes $1, $3 becomes $2 etc
shift 2 ## shift by two positions
## process all command-line arguments, whatever their number
while (( $# > 0 )); do
	echo "$1"
	shift
done

#? EVAL

## execute a string but does all the substitution before
var=5
echo {1..5} ## prints 1 2 3 4 5
echo {1..$var} ## prints {1..5} because the $ interrupts brace expansion structure and bash goes only one time through the text without going back
## brace expansion happens before variable expansion, so it read his range and doesnt recognize $var as a valid part of the range because it is not a number; then the variable expansion happens and its {1..5} but bash does not go back to perform the brace expansion
eval "echo {1..$var}" ## echo 1 2 3 4 5 because eval do all the substitutions before sending it to the shell execution

