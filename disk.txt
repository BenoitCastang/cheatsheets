#? DF

df ## disk filesystem: list mounted volumes, print their size, usage and mount point
## among them are tmpfs, temporary filesystesms that reside entirely in ram and swap memory and are useb by different processes
df -h ## human-readable
df -i ## show inode counts

#? DU

du ## disk usage - give name and size of selected directories - by default selects all directories and all subdirectories
## du gives real size of directories, while ls -l always display 4.0K
du file ## show disk usage of file only
du directory ## show disk usage of this directory only, with its subdirectories
du -s directory ## show not subdirectories - result only one line
du -h ## human-readable
du -c ## provide in the end the total size of all elements selected

du -hcs * ## show all elements without the subdirectories, human-readable and with total size
du -hcs * .* ## show also hiddent files

ncdu ## NCurses disk usage utility
ncdu -x ## skip external and network storage

#? FDISK

sudo fdisk -l ## see disks and partitions, their type and size
dmesg --follow ## see kernel hardware detection when the device is connected
lsblk ## show device names, types and mount points

fdisk /dev/vdb ## enter fdisk tool to format disk
MBR/DOS ## old partition type, max 4 primary partitions, max 2TB disks
## MBR is for Master Boot Record
## DOS is for Disk Operating System
GPT ## new partition type, max 128 primary partitions, no max 2TB disks
## GPT is for GUID Partition Table
m ## menu: see available commands
p ## print current partitionning scheme
o ## next created partition will be mbr/dos type
g ## next created partion will be gpt format
n ## add new partition
## fdisk will ask for partition number, first sector, last sector (+20G, +20M etc to choose the size)
w ## save changes

#? MKFS

sudo mkfs /dev/vdb1 ## format with default filesystem: ext2
sudo mkfs.ext4 /dev/vdb1 ## specify filesystem type

#? MOUNT

sudo mkdir /mnt/vdb1 ## create directory to mount the partition to
sudo mount /dev/sdb1 /mnt/vdb1 ## mount the partition
sudo mount -t ext4 /dev/sdb1 /mnt/vdb1 ## specify filesystem type if needed
/mnt ## directory to mount peristent storage
/media ## directory to mount temporaty storage (flash drives, cd-rom, external hard drives etc.)
sudo umount /mnt/vdb1 ## unmount volume
## Manual mounting is temporary - /etc/fstab must be edited to make it permanent

#? FSTAB

UUID ## Universally Unique Identifier - each filesystem has one
blkid ## list UUIDs of all filesystems
blkid /dev/sda ## get UUID of filesystem

/etc/fstab ## read at each starup by the system, place for permanent mounting
UUID=adsfew7r-34fas-sf4 /mnt/vdb1 ext4 rw,noauto 0 0 ## example
file system ## device name or UUID (UUID is better because device name can change)
mount point ## where volume will be mounted on the system
type ## file system type: ext4, swap etc.
options ## errors=remount-ro is default, it means if a error occurs, the file system is remounted read-only
## defaults: rw, exec, auto, nouser, async
## rw: device will be mounted read/write
## ro: read-only, to be prefrerred over rw unless very good reason
## exec: allow files to be executed as programs
## noexex: prevent scripts from being executed from the volume
## auto: automatically mount the device at boot time and when performing mount -a
## noauto: dont automatically mount the device - useful for not always connected volumes like backup volumes - mount mountpoint allow to mount them easily
## nouser: only root is able to mount the filesystems
## users: ## allow regular users to mount and unmount the filesystems
## async: output to the device should be asynchronous
dump ## determine whether the filesystem should be backed up, 0 is no, 1 is yes - leave it to 0, dump is unused nowadays
pass ## order in which fsck checks the filesystems in case of system failure - 0 is no check, 1 is first priority, 2 is second priority

mount ## see all mounted partitions and their options

#? LVM

## allows to resize filesystems without needing to reboot the server
## volume group: pool of storage, container of the disks
## physical volume: disk itself, physical or virtual
## logical volume: partition, can span multiple disks
apt install lvm2 ## install lvm

pvcreate /dev/sdb ## configure a disk for use with lvm 
pvdisplay ## display physical volumes
pvs ## summary info
vgcreate vg-name /dev/sdb ## create volume group - one physical volume is needed at a minimum
vgextend /dev/sdb ## add physical volume to the volume group
vgdisplay ## display volume groups
vgs ## summary info
lvcreate -n lv-name -L 10G vg-name ## create a 10G logical volume in volume group
lvdisplay ## diplay logical volumes
lvs ## summary info
mkfs.ext4 /dev/vg/lv ## format logical volume
mount /dev/vg/lv /mnt/lv ## mount it

## increase logical volume size
lvextend /dev/vg/lv -L 10G ## set new size
lvextend /dev/vg/lv -L +10G ## incresase size
lvextend /dev/vg/lv -l +100%FREE ## add all remaining space in the volume group
resize2fs /dev/vg/lv ## resize filesystem
df -h ## check new size - kv is there named /dev/mapper/vg-lv

## decrease logical volume size
e2fsck -f /dev/vg/lv ## filesystem check can be necessary first
resize2fs /dev/vg/lv 10G ## shrink filesystem first
lvreduce /dev/vg/lv -L 10G ## set new size
lvreduce /dev/vg/lv -L -10G ## decrease size

lvremove vg/lv ## remove logical volume
vgremove vg ## remove volume group
vgreduce vg /dev/vdb ## remove pv from vg
pvremove /dev/vdb ## make disk no more lvm

## snapshots - clone of logical volume, takes no space at the beginning, saves the changes - confirm changes or rollback to snapshot
lvcreate -s -n mysnapshot -L 2G vg/lv ## create snapshot of vg/lv
## -s is for snapshot
## -n is to choose a name
## -L is the maximum size
lvremove vg/mysnapshot ## confirm changes by deleting snapshot
umount /dev/vg/lv ## unmount lv before rollback
lvconvert --merge vg/mysnapshot ## cancel changes, roll back to snapshot
mount /dev/vg/lv /mnt/lv ## remount lv

#? PARTED

parted ## newer partitionning tool

#? BLOCKS

## blocks are chunks into which the filesystem divides the disk
## a filesystem block is the smallest unit of data that can be read from or written to the disk: the most common block size is 4 KB
smaller blocks ## more efficient storage because less storage is wasted, but performance is less good because more blocks need to be read or written - less memory used
larger blocks ## less efficient storage because more storage is wasted, but performance is better because less blocks need to be read or written - more memory used
## in storage devices, block size refers the smallest unit of data the device can physically read or writem, it is also known as sector size
stat -f / ## gives the block size and number of blocks of a filesystem
lsblk ## see all filesystems

#? DD

## data duplicator - copy and conversion of data

if=<path> ## input file, specify source file or device
of=<path> ## output file, specify destination file or device
count=<number> ## number of blocks
bs=<size> ## block size, amount of data read and written at one time during the copying process
status=progress ## display progress during the operation
/dev/zero ## pseudo-device, special file that provides infinite stream of null bytes, used to initialize data structures, create files of specific size, or overwrite disks or files with zeros

## create a bootable usb
dd if=image.iso of=/dev/sda bs=4M status=progress
## backup a disk
dd if=/dev/sda of=backup.img bs=1M status=progress
## restore a disk from backup
dd if=backup.img of=/dev/sda bs=1M status=progress
## wipe a disk (overwrite with zeros)
dd if=/dev/zero of=/dev/sda bs=1M status=progress
## create a file of specific size (filled with zeros)
dd if=/dev/zero of=1G_file bs=1M count=1024 ## 1024 x 1M = 1G
