awk 'pattern { action }' ## basic syntax
## pattern can be omittted
## awk will display only lines containing the pattern, then apply action on each line
ll | awk 'pattern { action }' ## work with result of a command
awk 'pattern { action }' filename ## work with a file

awk '{ print }' ## print everything
awk '{ print $1 }' ## print column 1
awk '{ print $1, $2 }' ## print columns 1 and 2

awk '/word/ { print }' ## print only lines containing word

## default field separator is tab
awk -F, 'pattern { action }' ## set comma as field separator

awk '$2 > 20 { print }' ## print line if column 2 is more than 20
awk -v var=10 '{ print var }' ## define and print variable
awk -v var=10 '$2 > var { print }' ## condition with variable

#? BUILT-IN VARIABLES

FS ## input field separator
OFS ## output field separator
NR ## number record: each line processed add one to this variable
NF ## number fields
$0 ## entire current record: whole line
#1, $2 ## column 1, column 2 etc

#? BLOCKS

awk BEGIN '{ action } pattern { action } END { action }'

END ## block used to perform a final action
awk '{ sum += $2 } END { print sum }' ## put the addition of numbers in column 2 in variable sum and print it
awk '{ sum += $2 } END { print "Total:", sum }' ## add text before variable print

BEGIN ## block used to perform preliminary action
awk 'BEGIN { print "Result: " } { print } ## print text before the data

#? CONDITIONS

awk '$3 < 10 { print $3 }' ## print column 3 if its value is less than 10
awk '$2==blue { print $2 }' ## print column 2 if its value equals 2
awk '/blue/ { print $0 }' ## print the line if blue is found

#? FUNCTIONS

awk '{ print length("string") }' ## print number of characters of a string

#? VARIABLES

#? IF

#? FOR
