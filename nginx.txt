apt install nginx ## install nginx

/etc/nginx/nginx.conf ## nginx conf main file
/var/www/html ## default folder for site files

/etc/nginx/sites-available/ ## directory where site configuration files are stored
/etc/nginx/sites-enabled/ ## directory where enabled sites are stored
sudo a2ensite site ## enable site - create an symlink from sites-enabled to sites-available
sudo a2dissite site ## disable site - remove link

/etc/apache2/sites-available/000-default.conf ## default site config file :
<VirtualHost *:80> ## listen requests on port 80
	ServerAdmin webmaster@localhost ## email address displayed in any error messages shown if there is a problem with the site
	DocumentRoot /var/www/html ## files location for the site
	ErrorLog ${APACHE_LOG_DIR}/error.log ## error log location
	## ${APACHE_LOG_DIR}/ is by default /var/log and defined is /etc/apache2/envvars
	CustomLog ${APACHE_LOG_DIR}/access.log combined ## access log location
</VirtualHost> ## end of this virtual host

#? MODULES

apt search libapache2-mod ## see list of modules available for apache
sudo apt install libapache2-mod-php8.1 ## install module
a2enmod ## list of installed modules, ready to be enabled
a2enmod php8.1 ## enable module
a2dismod php8.1 ## disable module
sudo systemctl restart apache2 ## apache must be restarted after module changes

#? MAKE SITE WORK

/etc/apache2/sites-available/site.conf ## make site config file
sudo a2ensite site ## enable site
sudo systemctl reload apache2 ## apache2.service must be reloaded each time configuration changes are made
http://localhost ## access the site on the browser

#? HAVE MULTIPLE SITES

## This can be done via one file for each site or via one file with all the sites - Each file has to be enabled separately
<VirtualHost *:80> ## Each tag represents a site
	ServerName example ## Each virtual host tag must have a ServerName line in order to differenciate sites
	DocumentRoot /var/www/example ## one seperate directory for each site
	ErrorLog ${APACHE_LOG_DIR}/example-error.log
	CustomLog ${APACHE_LOG_DIR}/example-access.log
</VirtualHost>
## dns must be configured for the ServerName to work - /etc/hosts must be edited with one new line per site
127.0.0.1 example
## traffic goes on localhost then apache forwards to the relevant directory
http://example ## browser access for each site

#? HTTPS

sudo a2enmod ssl ## enable ssl module
sudo systemctl restart apache2 ## restart apache
sudo a2enmod /etc/apache2/sites-availAable/defaut
openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr ## generate a new private key and a Certificate Signing Request (CSR)

## self certificate
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt ##  use the CSR and private key to generate self certificate
sudo mkdir -p /etc/apache2/ssl ## create ssl directory for certificates
sudo mv server.key /etc/apache2/ssl/
sudo mv server.crt /etc/apache2/ssl/
## Mofify /etc/apache2/sites-available/default-ssl.conf to use the certificate
SSLCertificateFile /etc/apache2/ssl/server.crt
SSLCertificateKeyFile /etc/apache2/ssl/server.key
sudo a2enmod ssl ## enable ssl module
sudo a2ensite default-ssl.conf ## enable site
sudo systemctl restart apache2
## now https should work with self certificate, meaning it signals the user the site is not safe

or

## certify by let's encrypt
sudo apt install -y certbot python3-certbot-apache ## install certbot, let's encrypt's automated process to issue and renew certificates
sudo certbot --apache -d example.com -d www.example.com ## auto certification

