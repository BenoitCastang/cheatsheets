#? DEBIAN

#! dpkg
## debian package - manual installation
dpkg -i package ## install a .deb package
dpkg -i --force package ## install package even if dependencies requirements are not met
dpkg -r package ## remove package leaving configuration files
dpkg -P package ## remove package plus configuration files
dpkg -I package ## get info about package
dpkg -L package ## get a list of every file installed by a specific package
dpkg-query -S file ## see which packet owns the file
dpkg-reconfigure packet ## reinstall a packet

#! apt-get update
## apt has over dpkg advanced search capabilities and automatic dependency resolution, it works also in concert with software repositories
apt-get update ## update local package index to get info and sources of new and updated packages
apt update ## shorthand

#! apt-get install
apt-get install package ## install package from online source
apt install package ## shorthand
apt-get install -f package ## fixing broken dependecies
apt install -f package ## shorthand

#! apt-get remove
apt-get remove package ## uninstall package, leaving configuration files
apt remove package ## shorthand
apt-get remove --purge package ## remove also configuration files
apt-get purge package ## same
apt purge package ## shorthand
apt autoremove ## remove unnecessary packages that were installed as dependencies but are no longer needed
apt autoremove --purge  ## purge also

#! apt-get upgrade
apt-get upgrade ## install all new version available of packages
apt upgrade ## shorthand
apt dist-upgrade ## upgrade the system while also handling dependencies intelligently

/var/cache/apt/archives ## folder where .deb files are downloaded whent installing packages
/var/cache/apt/archives/partial ## partially downloaded files
apt-get clean ## remove content of archives directories
apt clean ## package
apt list --installed ## echo list of installed packages

#! apt-cache

apt-cache ## operations on the package index
apt-cache search pattern ## output list of packages containing the pattern in either the name, description or files
apt search pattern ## shorthand
apt-cache show package ## get full info about a package
apt show package ## shorthand

/etc/apt/sources.list ## list of package sources
/etc/apt/sources.list.d/ ## folder for additional source files
/etc/apt/sources.list.d/file.list ## file example, source lines must be added in it
deb http://us.archive.ubuntu.com/ubuntu/ jammy main restricted ## typical source line
## a line can be manually added in the file, apt update is required
archive-type url distribution components ## source line syntax
deb ## binary packages archive type
deb-src ## source packages archive type (containing only source code)
## Components :
 ## Ubuntu :
  main ## contains officially supported, open-source packages.
  restricted ## contains officially supported, closed-source software, like device drivers for graphic cards, for example.
  universe ## contains community maintained open-source software.
  multiverse ## contains unsupported, closed-source or patent-encumbered software.
 ## Debian
  main ## consists of packages compliant with the Debian Free Software Guidelines (DFSG), which do not rely on software outside this area to operate and are considered to be part of the Debian distribution.
  contrib ## contains DFSG-compliant packages, but which depend on other packages that are not in main.
  non-free ## contains packages that are not compliant with the DFSG.
  security ## contains security updates.
  backports ## contains more recent versions of packages that are in main, not validated yet by debian stable version.

#! personal package archives

## PPAs are mini-repositories, often including a single application
apt-add-repository ppa:username/software ## add ppa automaticaly to the sources list dir

#! apt-file

apt-file ## file research
apt-file update ## update package cache (must be done after installation)
apt-file list package ## list files of a package
apt list package ## shorthand
apt-file search file ## search for package containing a file, even uninstalled packages

#! backing up and restoring debian packages

dpkg --get-selections > packages.list ## print list of installed packages, put it into a file
apt update
apt install dselect ## provides additional features when managing Debian packages
dselect update
dpkg --set-selections < packages.list
apt-get dselect-upgrade ## install list of packages

#! hardware enablement stack

## HWE stack provides additional compatibility for released after the last version of Ubuntu
apt install --install-recommends linux-generic-hwe-20.04

#? RED HAT

#! rpm
## red hat package manager - manual installation like dpkg

#! yum
## yellowdog update modifier - handles dependencies and repositories like apt

#! dnf
## dandified yum - modern replacement of yum
dnf check-update ## update package index and show available updates
dnf upgrade ## upgrade installed packages
dnf update ## update package index and upgrade installed packages

dnf install htop ## install packages
dnf remove htop ## remove packages
dnf autoremove ## remove unnecessary packages that were installed as dependencies but are no longer needed

dnf search package ## searching for packages
dnf info package ## get package info
dnf list ## show all packages in sources
dnf list installed ## show installed packages

## grouplist
dnf5 install 'dnf5-command(group)' ## install group command
dnf group list ## list package groups
dnf group install system-tools ## install package group

## history
dnf history list ## list transactions
dnf history info 4 ## print details about transaction
dnf history undo 4 ## revert actions of specified transaction
dnf history redo 4 ## repeat actions of specified transaction
dnf history rollback 4 ## undo all transactions performed after the specified transaction

#! repos
## redhat packages are stored in repositories - a subscription is needed to install packages and updates
subscription-manager ## manages redhat repo access based on subscription
dnf config-manager ## cli tool to enable/disable repos
/etc/yum.repos.d/ ## .repo files defining where and how to access repositories

subscription-manager register ## register system
subscription-manager status ## get system status: unknown is not registered, disabled is registered with SCA so subscription is not needed
subscription-manager attach --auto ## attach a subscription to the system - not needed with developper subscription thanks to SCA (Simple Content Acess)
subscription-manager list --available ## list subscriptions available to attach to the system
subscription-manager list --consumed ## print currently attached subscription
subscription-manager unregister ## removes the system from redhat account

subscription-manager repos --list ## list repos the attached subscription gives access to
subscription-manager repos --enable=ID ## enable repo with ID
subscription-manager repos --disable=ID ## disable repo with ID

dnf repolist ## list enabled repositories
dnf repolist all ## list available repositories

dnf config-manager --enable repo ## enable repository
dnf config-manager --disable repo ## disable repository
dnf config-manager --add-repo="http://mirror.uv.es/mirror/fedora-epel/9/Everything/x86_64/" ## add external repo - epel here

## gpg key verification
## gpg stands for GNU Privacy guard
## it is a public key that ensures the package is from a trusted source (not tampered with) and authentic (signed by the repository maintainer)
/etc/pki/rpm-gpg/ ## the directory where gpg keys are stored
## pki stands for Public Key Infrastructure - and the /etc/pki stores gpg keys, tls/ssl certificates etc.
curl http://mirror.uv.es/mirror/fedora-epel/RPM-GPG-KEY-EPEL-9 > sudo tee /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-9 ## download and store a gpg key - epel here
/etc/yum.repos.d/mirror.uv.es_mirror_fedora-epel_9_Everything_x86_64_.repo ## .repo file containing epel repo settings
gpgcheck=1 ## gpg check is enabled - gpg key is needed
gpgcheck=0 ## gpg check is disabled
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-9 ## url to the local file containing the gpg key

## modules
## modules allow to choose a specific version of a software with the appropriate dependencies
## the stream can be chosen, i.e. variant of the module (php8.0, php8.1 etc.)
## the profile can be chosen to install only what is needed for the use case, instead of everything (default, common, minimum, development, server, client etc.)
## the module chosen must be enabled, then the specified version like php8.1 is installed when performing atp install php instead of the most recent one in the distro repos
dnf module list ## list all modules, with their streams and profiles
## [e] means enabled stream, [d] default profile and [i] installed profile
dnf module list python ## list only python modules
dnf module enable php:8.1 ## enable specific stream
dnf install php ## now php8.1 will be installed instead of default version
dnf module reset php ## disable enabled stream
dnf module enable php:8.2 ## switch stream
dnf remove php ## remove php8.1
dnf install php ## install php8.2
dnf module install php:8.1/minimal ## enable then install with specific stream and profile
## this installs from modular stream instead of default distro repos

#? ARCH

#! pacman
## arch linux package manager
pacman -S package ## install package
pacman -R package ## remove package
pacman -Q ## list installed packages
pacman -y ## refresh package database
pacman -u ## upgrade packages
