whoami ## print effective username
who ## list active logins on the system
w ## list more information
id ## get uid, gid and groups of current user
id user ## get id of specific user
lsuser ## print all real users of the system - personal alias
users ## print the user names of users currently logged in to the user host

su [user] ## Switch user
su - [user] ## Switch user resetting the environment
su ## Switch to root
logout ## Log out command

useradd username ## create a user
useradd -m username ## create the user's home directory at the same time
useradd -M username ## create a user without home directory
useradd -d /home/john john ## custom home directory, can be common with another user but must exist before
useradd -r username ## create a system user (that does not login directly but does background tasks etc + will be under uid 1000 so not shown in the login screen)
useradd -c comment username ## add user info
useradd -e YYYY-MM-DD username ## set the expiry date for the account - the user cannot loginm he must concact the system administrator
useradd -f numberofdays username ## set grace period
useradd -g gid username ## set gid
useradd -G group1,group2 username ## define supplementary groups
useradd -s /bin/bash username ## set specific login shell
useradd -u uid username ## create user with specific uid
useradd -D ## show user creation default values

/etc/login.defs ## config file for user-related commands: password minimum and maximum days, warn days, uid and gid min and max, create home dir or not etc.
/etc/default/useradd ## config file for useradd
/etc/default/adduser.conf ## config file for adduser
/etc/skel ## default content of home directory for new users for both useradd and adduser

usermod [OPTIONS] USERNAME
usermod -l user ## rename user login name
usermod -d /path/to/new/home user ## define a new home directory
usermod -d /path/to/new/home -m user ## define a new home directory and rename old home (move home)
usermod -s /bin/bash user ## change the login shell for the user
usermod -u uid user ## change uid for the account
usermod -g primarygroup user ## change primary group of a user
usermod -G secondarygroup John ## set a new list of secondary groups for a user
usermod -G secondarygroup1,sedondarygroup2 John ## set multiple groups
usermod -aG secondarygroup username ## append secondary group to a user
usermod -aG secondarygroup1,secondarygroup2 username ## append multiple secondary groups
usermod -e YYYY-MM-DD user ## change account expiration date
usermod -L user ## lock user account
usermod -U user ## unlock user acount

chfn user ## change GECOS/comment field info interactively
chfn -f fullname user ## change full name
chfn -r room user ## change room
chfn -w workphone user ## change work-phone
chfn -h homephone user ## change home-phone
chfn -o other user ## changer other info

finger user ## show GECOS/comment field
finger -l user ## long listing
finger -s user ## short listing

chsh ## change user shell interactively
chsh -s /usr/bin/zsh ## change user's default shell, takes effect at next login
/etc/shells ## list of available shells

/ect/passwd ## List of users and info related to accounts: username, x for hidden password, uid, gid, GECOS/comment field, home directory, shell path
vipw ## on redhat, ensure no other admin is editing it at the same time
/etc/shadow ## Password info: username, password hash (! or * means user is locked, so direct connexion to that user is impossible, one must be logged in to the server with another user first), last change, minimum days, maximum days, warn days, grace period, expiration date

passwd ## change password of logged in user
passwd user ## change user's password
passwd -S user ## show password status: username, password status (P =passworded, NP = No password, L = Locked, PS = Password shadowed, stored securely), last change date, minumum and maximum days, warn days, grace period (-1 means no grace period)
passwd -l user ## lock user password, disabling the account - * or ! is instead of password hash in /etc/shadow
passwd -u user ## unlock user password, re-enabling the account
passwd -d user ## delete user password, making the account password-less
passwd -e user ## force password expiration thus password change
passwd -n numberofdays user ## set minimum days
passwd -x numberofdays user ## set maximum days
passwd -w numberofdays user ## set warn days
passwd -i numberofdays user ## set grace period (not standard, prefer chage -I)

chage username ## set minimum and maximum password age, last password change, days of warning before expiration, grace period and account expiration date
chage -l username ## show last password change, password expiration date, grace period, date of account expiration, minimum and maximum number of days between password changes, days of warning before password expiration
chage -d last-day ## set day of last password change - 0 forces the user to change his password the next time he logs in
chage -E YYYY-MM-DD ## set account expiration date
chage -I numberofdays ## set the number of days of inactivity after the password has expired before the accound is locked, i.e. the grace period
chage -m numberofdays ## minimum days between password change - prevents too frequent change
chage -M numberofdays ## maximum number of days - after that the password must be changed
chage -W numberofdays ## warn days - number of days before password expiration that a user begins receiving warnings to change the password

userdel user ## Remove user
userdel -r user ## Remove user and delete home directory

#? GROUPS

primary group ## group assigned to the files newly created by the user
private group ## automatically created group with the same name as the user, commonly being the same as primary group
supplementary group ## other groups to add rights, like sudo, wheel etc

id ## return uid, gid (primary group) and secondary groups
/ect/group ## List of groups: group name, password (x means not used), gid, list of supplementary members (i.e. the group is a secondary group for the user, primary groups for each user being specified in /etc/passwd)
vigr ## on redhat, ensure no other admin is editing it at the same time
/etc/gshadow ## list of groups: group name, encrypted password, group administrators, group members
groups user ## Display groups of a user
lsgroup ## print all real users on the system and the groups they belong to - personal alias

groupadd groupname ## Create a group
groupadd -g gid groupname ## create a group with a specified gid
groupadd -r groupname ## create a systemgroup

groupmod -n newname groupbname ## set new groupname
groupmod -g gid groupname ## set new gid

gpasswd -a username groupname ## make user secondary member of the group
gpasswd -d username groupname ## Remove user from a group
gpasswd -A user1,user2 groupname ## specify group administrators who can remove or add users from a group without needing root privileges
gpasswd groupname ## set password for a group - deprecated
gpasswd -r groupname ## remove password

groupdel groupname ## Delete a group

groupmems -g groupname -l ## list secondary members of the group

## newgrp - open new shell session with another active group
newgrp ## keep same group
newgrp users ## open session with being the main group of the user

#? SUID, SGID, STICKY BIT

## set user ID, set group ID, sticky bit
suid ## on executable file: file is executed with the rights of the owner, not the one who run it
guid ## on executable file: file is executed with the rights of the owner group, not the group of the user who executed the command
guid ## on directory: file created in this directory is owned by dir's owner instead of user's main group
## suid and guid work with binaries only not scripts - ex. passwd or newgrp: any user running it is given root rights for the time of the execution
sticky bit ## on directory: no one is allowed to delete or rename a file in a directory but file's owner and dir's owner event if writing rights are set to other- /tmp is sticky bit

---S------ ## suid is set without executable permission for the user
---s------ ## suid is set with executable permission for the user
------S--- ## guid is set without executable permission for the group
------s--- ## guid is set with executable permission for the group
d--------T ## sticky bit is set without executable permission for others
d--------t ## sticky bit is set with executable permission for others

chmod 4000 ## set suid
chmod 2000 ## set guid
chmod 1000 ## set sticky bit
chmod +s ## set suid and guid
chmod +t ## set sticky bit

?# UMASK

## user file-creation mode mask determines the default permission settings for newly created files and directories
## mask is inverted: 021 means 756
umask ## print umask for current user
umask 022 ## set new umask
