#? WHO

whoami ## print effective username
who ## list active logins on the system
w ## list more information

#? ID

id ## get uid, gid and groups of current user
id <user> ## get id of specific user
id -u ## print effective uid
id -g ## print effective gid
id -G ## print all group ids

#? LSUSER

lsuser ## print all real users of the system - personal alias
users ## print the user names of users currently logged in to the user host

#? SU

su [user] ## Switch user
su - [user] ## Switch user resetting the environment
su ## Switch to root
logout ## Log out command

#? USERADD

useradd username ## create a user
useradd -m username ## create the user's home directory at the same time
useradd -M username ## create a user without home directory
useradd -d /home/john john ## custom home directory, can be common with another user but must exist before
useradd -m -k skeldir username ## specify a skeldir other than the default one
useradd -r username ## create a system user (that does not login directly but does background tasks etc + will be under uid 1000 so not shown in the login screen)
useradd -c comment username ## add user info
useradd -e YYYY-MM-DD username ## set the expiry date for the account - the user cannot login and must contact the system administrator
useradd -f numberofdays username ## set grace period - user must change his password
useradd -g gid username ## set gid
useradd -G group1,group2 username ## define supplementary groups
useradd -s /bin/bash username ## set specific login shell
useradd -u uid username ## create user with specific uid
useradd -D ## show user creation default values

/etc/default/useradd ## config file for useradd

#? LOGIN.DEFS

/etc/login.defs ## config file for user-related commands

UID_MIN and UID_MAX ## range of possible user id when using useradd
GID_MIN and GID_MAX ## range of possible group id when using groupadd
CREATE_HOME ## whether a home directory is created by default for new users
USERGROUPS_ENAB ## whether is created a private groupe for each new user - otherwise new users are put in the users group
MAIL_DIR ## mail spool directory
PASS_MAX_DAYS and PASS_MIN_DAYS ## max and min days of using a password
PASS_MIN_LENGTH ## password minimum length
PASS_WARN_AGE ## number of warning days before a password expires

#? SKEL

/etc/skel ## default content of home directory for new users for both useradd and adduser
$SKEL ## variable whose value is absolute path to the skel directory - default is /etc/skel

#? USERMOD

usermod [OPTIONS] USERNAME
usermod -l user ## rename user login name
usermod -d /path/to/new/home user ## define a new home directory (does not create the directory)
usermod -d /path/to/new/home -m user ## rename home directory (define new one and mode content and delete old directory)
usermod -s /bin/bash user ## change the login shell for the user
usermod -c 'comment' user ## change comment
usermod -u uid user ## change uid for the account
usermod -g primarygroup user ## change primary group of a user
usermod -G secondarygroup John ## set a new list of secondary groups for a user
usermod -G secondarygroup1,sedondarygroup2 John ## set multiple groups
usermod -aG secondarygroup username ## append secondary group to a user
usermod -aG secondarygroup1,secondarygroup2 username ## append multiple secondary groups
usermod -e YYYY-MM-DD user ## change account expiration date
usermod -f numberofdays username ## change grace period - user must change his password
usermod -L user ## lock user account - adds an exclamation mark in front of the encrypted password in the /etc/shadow file, thus disabling access with a password for the user
usermod -U user ## unlock user acount - removes exclatmation mark of /etc/shadow

#? USERDEL

userdel user ## remove user
userdel -r user ## remove user and delete home directory

#? FINGER

## show comments
finger user ## show GECOS/comment field
finger -l user ## long listing
finger -s user ## short listing

#? CHFN

## change finger - modify comments
chfn user ## change GECOS/comment field info interactively
chfn -f fullname user ## change full name
chfn -r room user ## change room
chfn -w workphone user ## change work-phone
chfn -h homephone user ## change home-phone
chfn -o other user ## changer other info

#? CHSH

chsh ## change user shell interactively
chsh -s /usr/bin/zsh ## change user's default shell, takes effect at next login
/etc/shells ## list of available shells

#? PASSWD

/ect/passwd ## List of users and info related to accounts: username, x for hidden password, uid, gid, GECOS/comment field, home directory, shell path
vipw ## on redhat, ensure no other admin is editing it at the same time
/etc/shadow ## Password info: username, password hash (* or ! followed by hashed password  means user is locked, so direct connexion to that user is impossible, one must be logged in to the server with another user first), last change (number of days since 01/01/1970), minimum days, maximum days, warn days, grace period, expiration date

passwd ## change password of logged in user
passwd user ## change user's password
passwd -S user ## show password status: username, password status (P =passworded, NP = No password, L = Locked, PS = Password shadowed, stored securely), last change date, minumum and maximum days, warn days, grace period (-1 means no grace period)
passwd -l user ## lock user password like usermod -L, disabling the account
passwd -u user ## unlock user password, re-enabling the account
passwd -d user ## delete user password, making the account password-less
passwd -e user ## force password expiration thus password change
passwd -n numberofdays user ## set minimum days
passwd -x numberofdays user ## set maximum days
passwd -w numberofdays user ## set warn days
passwd -i numberofdays user ## set grace period (not standard, prefer chage -I)

#? CHAGE

## change age information of password
chage username ## change info interactively
chage -l username ## show info

chage -d YYYY-MM-DD ## set day of last password change - 0 forces the user to change his password the next time he logs in
chage -E YYYY-MM-DD ## set account expiration date
chage -I numberofdays ## set the number of days of inactivity after the password has expired before the accound is locked, i.e. the grace period
chage -m numberofdays ## minimum days between password change - prevents too frequent change
chage -M numberofdays ## maximum number of days - after that the password must be changed
chage -W numberofdays ## warn days - number of days before password expiration that a user begins receiving warnings to change the password

#? GROUPS

primary group ## group assigned to the files newly created by the user
private group ## automatically created group with the same name as the user, commonly being the same as primary group
supplementary group ## other groups to add rights, like sudo, wheel etc

id ## return uid, gid (primary group) and secondary groups

/ect/group ## List of groups: group name, encrypted password, gid, list of supplementary members (i.e. the group is a secondary group for the user, primary groups for each user being specified in /etc/passwd)
vigr ## on redhat, ensure no other admin is editing it at the same time

/etc/gshadow ## list of groups: group name, encrypted password, group administrators (can modify the group password and the group members without being root with the gpasswd command), group members
encrypted password ## possible value are:
*, !, !* ## user outside of group cant access even with the password
!! ## the group has no password yet, so it cant be accessed either by a user outside of the group
hashed password ## user outside of group can access if he has the password
empty ## any user can access without a password

pwck ## check consistency between /ect/group and /etc/gshadow and whether users have a home directory
groups user ## Display groups of a user
lsgroup ## print all real users on the system and the groups they belong to - personal alias

groupadd groupname ## create a group
groupadd -g gid groupname ## create a group with a specified gid
groupadd -r groupname ## create a systemgroup

groupmod -n newname groupname ## set new groupname
groupmod -g gid groupname ## set new gid

gpasswd -a username groupname ## make user secondary member of the group
gpasswd -d username groupname ## Remove user from a group
gpasswd -A user1,user2 groupname ## specify group administrators who can remove or add users from a group without needing root privileges
gpasswd groupname ## set password for a group - deprecated
gpasswd -r groupname ## remove password

groupdel groupname ## delete a group

groupmems -g groupname -l ## list secondary members of the group

#? NEWGRP

## open new shell session with a specific group as user's primary group
## hence all files created in this session are owned by this group

newgrp ## open session with default group
newgrp users ## open session with specific primary group
id ## see the new groups of the user

## the group specified must be among secondary groups of the user, otherwise a password is asked
gpasswd groupname ## change password for the group
## if user is member of the group, no password is required, if user is not, he can connect to it with the password

#? ADDUSER

adduser username ## create user
## perl script using useradd, prompt for password and personal info, automatically create home directory, copy conf files from /etc/skel, configure bash as shell, create a group with the name of the user and define it as primary group for him
## useradd is a package containing also addgroup, deluser and delgroup

/etc/default/adduser.conf ## config file for adduser

addgroup groupname ## create group
addgroup --system groupname ## create system group

adduser username groupname ## add user to a group

deluser username ## delete user
deluser --remove-home ## delete user and home directory
deluser --remove-all-files ## delete user and home directory plus any file belonging to the user on the system

deluser username groupname ## remove user from group

delgroup groupname ## delete group

#? SUID, SGID, STICKY BIT

## set user ID, set group ID, sticky bit
suid on executable file ## file is executed with the rights of the owner, not the one who run it
sgid on executable file ## file is executed with the rights of the owner group, not the group of the user who executed the command
## suid and sgid work with binaries files only not scripts - ex. passwd or newgrp: any user running it is given root rights for the time of the execution
sgid on directory ## file created in this directory is owned by dir's owner instead of user's main group
sticky bit on directory ## no one is allowed to delete or rename a file in a directory but file's owner and dir's owner event if writing rights are set to other- /tmp is sticky bit

---S------ ## suid is set without executable permission for the user
---s------ ## suid is set with executable permission for the user
------S--- ## sgid is set without executable permission for the group
------s--- ## sgid is set with executable permission for the group
d--------T ## sticky bit is set without executable permission for others
d--------t ## sticky bit is set with executable permission for others

chmod 4000 ## set suid
chmod 2000 ## set sgid
chmod 1000 ## set sticky bit
chmod +s ## set suid and sgid
chmod +t ## set sticky bit

?# UMASK

## user file-creation mode mask determines the default permission settings for newly created files and directories
## mask is inverted: 021 means 756
umask ## print umask for current user
umask 022 ## set new umask
